import express from 'express';
import axios from 'axios';
import fs from 'fs';
import path from 'path';
import TelegramBot from 'node-telegram-bot-api';
import ffmpeg from 'fluent-ffmpeg';
import ffmpegPath from 'ffmpeg-static'; // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ffmpeg-static
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

dotenv.config();

const token = process.env.TELEGRAM_BOT_TOKEN;

const bot = new TelegramBot(token, { polling: true });

const app = express();
app.use(express.json());

const PORT = 3001;
app.listen(PORT, () => {
  console.log(`Express server is listening on port ${PORT}`);
});

const userLanguages = {};

const messages = {
  ru: {
    start: '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:',
    languageSet: '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫',
    greeting: '–ü—Ä–∏–≤–µ—Ç, —è CircleBot, –∑–¥–µ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏',
    videoRequest: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ –∫—Ä—É–∂–æ–∫.',
    help: '–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /start, /help –∏ /language.',
    error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.',
    videoProcessed: '–í–∞—à–µ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫ –≥–æ—Ç–æ–≤!',
  },
  en: {
    start: 'Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
    languageSet: 'Language set to English.',
    greeting: 'Hello, I am CircleBot, here are all the bot features',
    videoRequest: 'Send me a video so I can convert it into a circle.',
    help: 'This is a demo bot. You can use /start, /help, and /language commands.',
    error: 'An error occurred while processing the video.',
    videoProcessed: 'Your circle video is ready!',
  }
};

bot.setMyCommands([
  { command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
  { command: '/help', description: '–ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' },
  { command: '/language', description: '–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫' }
]);

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const lang = userLanguages[chatId] || 'ru'; 
  bot.sendMessage(chatId, messages[lang].start, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'lang_ru' }], 
        [{ text: 'üá¨üáß English', callback_data: 'lang_en' }]
      ]
    }
  });
});

bot.onText(/\/language/, (msg) => {
  const chatId = msg.chat.id;
  const lang = userLanguages[chatId] || 'ru'; 
  bot.sendMessage(chatId, messages[lang].start, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'lang_ru' }],
        [{ text: 'üá¨üáß English', callback_data: 'lang_en' }]
      ]
    }
  });
});

bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  const lang = userLanguages[chatId] || 'ru'; 
  bot.sendMessage(chatId, messages[lang].help);
});

bot.on('callback_query', async callbackQuery => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  bot.answerCallbackQuery(callbackQuery.id);

  if (data === 'lang_ru') {
    userLanguages[chatId] = 'ru'; 
    bot.sendMessage(chatId, messages.ru.languageSet);
    bot.sendMessage(chatId, messages.ru.greeting, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üé¨–í–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ–∫üé¨', callback_data: 'vtc' }],
          [{ text: 'üá∑üá∫ Language üá¨üáß', callback_data: 'lng' }],
          [{ text: 'üÜò–ü–æ–º–æ—â—åüÜò', callback_data: 'help'}]
        ]
      }
    });
  } else if (data === 'lang_en') {
    userLanguages[chatId] = 'en';
    bot.sendMessage(chatId, messages.en.languageSet);
    bot.sendMessage(chatId, messages.en.greeting, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üé¨Video to circleüé¨', callback_data: 'vtc' }],
          [{ text: 'üá∑üá∫ Language üá¨üáß', callback_data: 'lng' }],
          [{ text: 'üÜòHelpüÜò', callback_data: 'help'}]
        ]
      }
    });
  } else if (data === 'lng') {
    bot.sendMessage(chatId, messages[userLanguages[chatId]].start, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'lang_ru' }],
          [{ text: 'üá¨üáß English', callback_data: 'lang_en' }]
        ]
      }
    });
  } else if (data === 'help') {
    const lang = userLanguages[chatId] || 'ru';
    bot.sendMessage(chatId, messages[lang].help);
  } else if (data === 'vtc') {
    const lang = userLanguages[chatId] || 'ru';
    bot.sendMessage(chatId, messages[lang].videoRequest);
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
const processVideo = async (inputPath, outputPath, chatId, lang) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ, –∏—Å–ø–æ–ª—å–∑—É—è ffprobe
    const probe = await new Promise((resolve, reject) => {
      ffmpeg.ffprobe(inputPath, (err, metadata) => {
        if (err) reject(err);
        resolve(metadata);
      });
    });

    // –ü–æ–ª—É—á–∞–µ–º —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É –≤–∏–¥–µ–æ
    const { width, height } = probe.streams[0];

    console.log(`–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ: ${width}x${height}`);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ
    let cropFilter = '';
    let scaleFilter = 'scale=400:400'; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤–∏–¥–µ–æ

    // –ï—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –∏–ª–∏ –≤—ã—Å–æ—Ç–∞ –≤–∏–¥–µ–æ –º–µ–Ω—å—à–µ 400, —Ç–æ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º crop, –∏–ª–∏ —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä
    if (width < 400 || height < 400) {
      cropFilter = ''; // –£–±–∏—Ä–∞–µ–º crop, –µ—Å–ª–∏ –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ
      scaleFilter = `scale=${width}:${height}`; // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    } else {
      cropFilter = `crop=400:400:(iw-400)/2:(ih-400)/2`; // –û–±—Ä–µ–∑–∞–µ–º –≤ –∫—Ä—É–≥
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    ffmpeg(inputPath)
      .videoFilter([cropFilter, scaleFilter]) // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      .outputOptions('-pix_fmt', 'yuv420p')
      .on('start', (commandLine) => {
        console.log(`ffmpeg –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª: ${commandLine}`);
      })
      .on('stderr', (stderrLine) => {
        console.log(`ffmpeg stderr: ${stderrLine}`);
      })
      .on('end', async () => {
        if (fs.existsSync(outputPath)) {
          const stats = fs.statSync(outputPath);
          console.log(`Output file exists. Size: ${stats.size} bytes`);
          await bot.sendVideoNote(chatId, outputPath, { caption: messages[lang].videoProcessed });
        } else {
          console.error('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ');
          await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ.');
        }

        try {
          await fs.promises.unlink(inputPath);
          await fs.promises.unlink(outputPath);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:', error.message);
        }
      })
      .on('error', (err) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ:', err.message);
        bot.sendMessage(chatId, `${messages[lang].error}: ${err.message}`);
      })
      .run();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ:', error.message);
    bot.sendMessage(chatId, `${messages[lang].error}: ${error.message}`);
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∏–¥–µ–æ
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const lang = userLanguages[chatId] || 'ru'; 

  if (msg.video) {
    const fileId = msg.video.file_id;
    const processingMessage = await bot.sendMessage(chatId, '–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...');

    try {
      const fileUrl = await bot.getFileLink(fileId);

      const __filename = fileURLToPath(import.meta.url);
      const __dirname = path.dirname(__filename);

      const tmpDir = path.join(__dirname, 'tmp');
      if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir);
      const inputPath = path.join(tmpDir, `input-${chatId}.mp4`);
      const outputPath = path.join(tmpDir, `output-${chatId}.mp4`);

      const downloadVideo = async () => {
        const response = await axios.get(fileUrl, { responseType: 'stream' });
        const writer = fs.createWriteStream(inputPath);
        response.data.pipe(writer);
        return new Promise((resolve, reject) => {
          writer.on('finish', resolve);
          writer.on('error', reject);
        });
      };

      await downloadVideo();

      await processVideo(inputPath, outputPath, chatId, lang);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ:', error.message);
      bot.sendMessage(chatId, `${messages[lang].error}: ${error.message}`);
    }
  }
});
