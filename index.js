import express from 'express';
import axios from 'axios';
import fs from 'fs';
import path from 'path';
import TelegramBot from 'node-telegram-bot-api';
import ffmpeg from 'fluent-ffmpeg';
import ffmpegPath from 'ffmpeg-static'; // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ffmpeg-static
import { fileURLToPath } from 'url';

const token = '7401632575:AAGIPNXZGltUiN5ch8v20ZBlapcrvQAu0Y8';
const ngrokUrl = 'https://9a78-176-124-146-172.ngrok-free.app';

const bot = new TelegramBot(token, { polling: true });

const app = express();
app.use(express.json());

app.post(`/bot${token}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

const PORT = 3001;
app.listen(PORT, () => {
  console.log(`Express server is listening on port ${PORT}`);
});

bot.setMyCommands([
  { command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
  { command: '/help', description: '–ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' },
  { command: '/language', description: '–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫' }
]);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ /language
bot.onText(/\/start|\/language/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'lang_ru' }],
        [{ text: 'üá¨üáß English', callback_data: 'lang_en' }]
      ]
    }
  });
});

bot.on('callback_query', async callbackQuery => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  bot.answerCallbackQuery(callbackQuery.id);

  if (data === 'lang_ru') {
    bot.sendMessage(chatId, '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫');
    bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç, —è *NAME*, –∑–¥–µ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üé¨–í–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ–∫üé¨', callback_data: 'vtc' }],
          [{ text: 'üá∑üá∫ Language üá¨üáß', callback_data: 'lng' }],
          [{ text: 'üÜò–ü–æ–º–æ—â—åüÜò', callback_data: 'help'}]
        ]
      }
    });
  } else if (data === 'lang_en') {
    bot.sendMessage(chatId, 'Language set to English.');
    bot.sendMessage(chatId, 'Hello, I am *NAME*, here are all the bot features', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üé¨Video to circleüé¨', callback_data: 'vtc' }],
          [{ text: 'üá∑üá∫ Language üá¨üáß', callback_data: 'lng' }],
          [{ text: 'üÜòHelpüÜò', callback_data: 'help'}]
        ]
      }
    });
  } else if (data === 'lng') {
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'lang_ru' }],
          [{ text: 'üá¨üáß English', callback_data: 'lang_en' }]
        ]
      }
    });
  } else if (data === 'help') {
    bot.sendMessage(chatId, '–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /start, /help –∏ /language.');
  } else if (data === 'vtc') {
    bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ –∫—Ä—É–∂–æ–∫.');
  }
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  const text = msg.text;
  if (text === '/start' || text === '/help' || text === '/language') return;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –≤–∏–¥–µ–æ
  if (msg.video) {
    const fileId = msg.video.file_id;

    const processingMessage = await bot.sendMessage(chatId, '–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...');

    try {
      const fileUrl = await bot.getFileLink(fileId);
            
      const __filename = fileURLToPath(import.meta.url); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
      const __dirname = path.dirname(__filename); // –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞

      const tmpDir = path.join(__dirname, 'tmp');
      if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir); // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
      const inputPath = path.join(tmpDir, `input-${chatId}.mp4`);
      const outputPath = path.join(tmpDir, `output-${chatId}.mp4`);

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ –≤–∏–¥–µ–æ
      console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ ${fileUrl}`);
      
      // –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
      const downloadVideo = async () => {
        const response = await axios.get(fileUrl, { responseType: 'stream' });
        const writer = fs.createWriteStream(inputPath);        
        response.data.pipe(writer);
        return new Promise((resolve, reject) => {
          writer.on('finish', resolve);
          writer.on('error', reject);
        });
      };

      await downloadVideo();      
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –≤–∏–¥–µ–æ
      console.log(`–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –ü—É—Ç—å: ${inputPath}`);

      // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ ffmpeg
      ffmpeg.setFfmpegPath(ffmpegPath);  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ffmpeg-static

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
      ffmpeg(inputPath)
        .output(outputPath)
        .videoFilter([
          'crop=in_w:in_w:(in_w/2):(in_h/4)',  // –û–±—Ä–µ–∑–∞–µ–º –≤–∏–¥–µ–æ –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
          'scale=400:400'         // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        ])
        .outputOptions('-pix_fmt', 'yuv420p')
        .on('start', (commandLine) => {
          console.log(`ffmpeg process started: ${commandLine}`);
        })
        .on('stderr', (stderrLine) => {
          console.log(`ffmpeg stderr: ${stderrLine}`);
        })
        .on('end', async () => {
          console.log('ffmpeg processing completed');
          if (fs.existsSync(outputPath)) {
            const stats = fs.statSync(outputPath);
            console.log(`Output file exists. Size: ${stats.size} bytes`);
            await bot.sendVideoNote(chatId, outputPath, { caption: '–í–∞—à–µ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫ –≥–æ—Ç–æ–≤!' });
          } else {
            console.log('Output file does not exist!');
            await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ.');
          }
          // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
          try {
            await fs.promises.unlink(inputPath);
            await fs.promises.unlink(outputPath);
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:', error.message);
          }
        })
        .on('error', (err) => {
          bot.sendMessage(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: ${err.message}`);
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ:', err.message);
        })
        .run();
    } catch (error) {
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.');
      bot.sendMessage(chatId, error.message);
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ:', error.message);
    } finally {
      bot.deleteMessage(chatId, processingMessage.message_id);
    }
  } else {
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
  }
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
