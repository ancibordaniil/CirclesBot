const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const axios = require('axios');

const token = '7401632575:AAGIPNXZGltUiN5ch8v20ZBlapcrvQAu0Y8';
const ngrokUrl = 'https://4192-85-143-106-69.ngrok-free.app'; 

const bot = new TelegramBot(token);
bot.setWebHook(`${ngrokUrl}/bot${token}`);

const app = express();
app.use(express.json());

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç –≤–µ–±—Ö—É–∫–∞
app.post(`/bot${token}`, (req, res) => {
  bot.processUpdate(req.body);  // –ü–µ—Ä–µ–¥–∞—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–æ—Ç–∞
  res.sendStatus(200);
});

// –ó–∞–ø—É—Å–∫ express —Å–µ—Ä–≤–µ—Ä–∞
const PORT = 3001;
app.listen(PORT, () => {
  console.log(`Express server is listening on port ${PORT}`);
  axios.get(`https://api.telegram.org/bot${token}/getWebhookInfo`)
    .then(response => console.log(response.data))
    .catch(console.error);
});

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.setMyCommands([
    { command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
    { command: '/help', description: '–ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' },
    { command: '/language', description: '–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫' }
]);

const userLanguages = {};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:', {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'lang_ru' }],
                [{ text: 'üá¨üáß English', callback_data: 'lang_en' }]
            ]
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /start, /help –∏ /language.');
});



// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /language
bot.onText(/\/language/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:', {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'lang_ru' }],
                [{ text: 'üá¨üáß English', callback_data: 'lang_en' }]
            ]
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
bot.on('callback_query', (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    bot.answerCallbackQuery(callbackQuery.id);

    if (data === 'lang_ru') {
        userLanguages[chatId] = 'ru';
        bot.sendMessage(chatId, '/help');
    } else if (data === 'lang_en') {
        userLanguages[chatId] = 'en';
        bot.sendMessage(chatId, 'Language set to English.');
    }
});

bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text === '/start' || text === '/help' || text === '/language') return;

    const language = userLanguages[chatId] || 'en'; 
    const response = language === 'ru' ? `–í—ã —Å–∫–∞–∑–∞–ª–∏: "${text}"` : `You said: "${text}"`;

    bot.sendMessage(chatId, response);
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
