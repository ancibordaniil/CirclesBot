import TelegramBot from 'node-telegram-bot-api';
import express from 'express';
import axios from 'axios';
import { exec } from 'child_process';
import fs from 'fs';
import path from 'path';

const token = '7401632575:AAGIPNXZGltUiN5ch8v20ZBlapcrvQAu0Y8';
const ngrokUrl = 'https://96ad-176-124-146-172.ngrok-free.app'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –Ω–µ—Ç –ø—Ä–æ–±–µ–ª–∞

const bot = new TelegramBot(token);
bot.setWebHook(`${ngrokUrl}/bot${token}`);

const app = express();
app.use(express.json());

app.post(`/bot${token}`, (req, res) => {
  bot.processUpdate(req.body); 
  res.sendStatus(200);
});

const PORT = 3001;
app.listen(PORT, () => {
  console.log(`Express server is listening on port ${PORT}`);
  axios.get(`https://api.telegram.org/bot${token}/getWebhookInfo`)
    .then(response => console.log(response.data))
    .catch(console.error);
});

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.setMyCommands([
  { command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
  { command: '/help', description: '–ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' },
  { command: '/language', description: '–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫' }
]);

const userLanguages = {};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'lang_ru' }],
        [{ text: 'üá¨üáß English', callback_data: 'lang_en' }]
      ]
    }
  });
});

bot.onText(/\/language/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'lang_ru' }],
        [{ text: 'üá¨üáß English', callback_data: 'lang_en' }]
      ]
    }
  });
});

bot.on('callback_query', async callbackQuery => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  bot.answerCallbackQuery(callbackQuery.id);

  if (data === 'lang_ru') {
    userLanguages[chatId] = 'ru';
    bot.sendMessage(chatId, '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫');
    bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç, —è *NAME*, –∑–¥–µ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üé¨–í–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ–∫üé¨', callback_data: 'vtc' }],
          [{ text: 'üá∑üá∫ Language üá¨üáß', callback_data: 'lng' }],
          [{ text: 'üÜò–ü–æ–º–æ—â—åüÜò', callback_data: 'help'}]
        ]
      }
    });
  } else if (data === 'lang_en') {
    userLanguages[chatId] = 'en';
    bot.sendMessage(chatId, 'Language set to English.');
    bot.sendMessage(chatId, 'Hello, I am *NAME*, here are all the bot features', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üé¨–í–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ–∫üé¨', callback_data: 'vtc' }],
          [{ text: 'üá∑üá∫ Language üá¨üáß', callback_data: 'lng' }],
          [{ text: 'üÜòHelpüÜò', callback_data: 'help'}]
        ]
      }
    });
  } else if (data === 'lng') {
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'lang_ru' }],
          [{ text: 'üá¨üáß English', callback_data: 'lang_en' }]
        ]
      }
    });
  } else if (data === 'help') {
    bot.sendMessage(chatId, '–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /start, /help –∏ /language.');
  } else if (data === 'vtc') {
    bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ –∫—Ä—É–∂–æ–∫.');
  }
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –≤–∏–¥–µ–æ
  if (msg.video) {
    const fileId = msg.video.file_id;

    const processingMessage = await bot.sendMessage(chatId, '–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...');
    try {
      const fileUrl = await bot.getFileLink(fileId);

      const inputPath = path.join(__dirname, `input-${chatId}.mp4`);
      const outputPath = path.join(__dirname, `output-${chatId}.mp4`);

      // –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
      const downloadVideo = async () => {
        const response = await axios.get(fileUrl, { responseType: 'stream' });
        const writer = fs.createWriteStream(inputPath);
        response.data.pipe(writer);
        return new Promise((resolve, reject) => {
          writer.on('finish', resolve);
          writer.on('error', reject);
        });
      };

      await downloadVideo();

      const ffmpegCommand = `ffmpeg -i ${inputPath} -vf "scale=400:400,format=yuv420p" -c:v libx264 -profile:v baseline -level 3.0 -b:v 256k -bufsize 256k -pix_fmt yuv420p -f mp4 ${outputPath}`;
    
      await new Promise((resolve, reject) => {
        exec(ffmpegCommand, (error) => {
          if (error) {
            reject(error);
          } else {
            resolve();
          }
        });
      });

      await bot.sendVideo(chatId, outputPath, { caption: '–í–∞—à–µ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫ –≥–æ—Ç–æ–≤!' });

      fs.unlinkSync(inputPath);
      fs.unlinkSync(outputPath);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.');
    } finally {
      bot.deleteMessage(chatId, processingMessage.message_id);
    }
  } else {
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text === '/start' || text === '/help' || text === '/language') return;

  const language = userLanguages[chatId] || 'en';
  const response = language === 'ru' ? `–í—ã —Å–∫–∞–∑–∞–ª–∏: "${text}"` : `You said: "${text}"`;

  bot.sendMessage(chatId, response);
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
