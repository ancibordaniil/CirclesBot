name: Node.js CI/CD Pipeline

on:
  push:
    branches:
      - main  # Пайплайн будет запускаться при каждом пуше в ветку main
  pull_request:
    branches:
      - main  # Также будет запускаться при создании pull request в main

jobs:
  build:
    runs-on: ubuntu-latest  # Используем последнюю версию Ubuntu для сборки

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v2  # Клонирование вашего репозитория

      # Шаг 2: Установка Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Убедитесь, что используете правильную версию Node.js

      # Шаг 3: Установка зависимостей
      - name: Install dependencies
        run: |
          npm install  # Устанавливаем зависимости через npm

      # Шаг 4: Запуск тестов (если они есть)
      - name: Run tests (если есть)
        run: |
          npm test  # Если у вас есть тесты, запустите их

      # Шаг 5: Сборка проекта (если необходимо)
      - name: Build the project (если необходимо)
        run: |
          npm run build  # Этот шаг нужен только если у вас есть процесс сборки (например, с Webpack или Babel)

      # Шаг 6: Настройка SSH и деплой на сервер
      - name: Deploy to server
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}  # Пользователь для SSH подключения
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}  # Хост для SSH подключения
          DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}  # SSH ключ для авторизации
        run: |
          # Настройка ssh-agent
          mkdir -p ~/.ssh
          echo "$DEPLOY_SSH_KEY" > ~/.ssh/id_ed25519  # Записываем SSH ключ в файл
          chmod 600 ~/.ssh/id_ed25519  # Меняем права доступа к ключу

          # Добавление хоста в known_hosts для предотвращения ошибки при подключении
          ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts

          # Подключение через SSH и выполнение команд на сервере
          ssh -i ~/.ssh/id_ed25519 $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
            cd /path/to/your/project  # Убедитесь, что путь правильный
            git pull  # Загружаем последние изменения из репозитория
            npm install  # Устанавливаем зависимости
            pm2 restart all  # Перезапускаем приложение через pm2
          EOF
